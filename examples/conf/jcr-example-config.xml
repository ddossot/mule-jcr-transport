<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mule-configuration PUBLIC "-//MuleSource //DTD mule-configuration XML V1.0//EN"
                                "http://mule.mulesource.org/dtds/mule-configuration.dtd">
<mule-configuration id="JCR_Example" version="1.0">

	<container-context className="org.mule.extras.spring.SpringContainerContext">
		<properties>
			<property name="configFile" value="../conf/jcr-example-beans.xml" />
		</properties>
	</container-context>

	<connector name="JcrConnector" className="org.mule.providers.jcr.JcrConnector">
		<properties>
			<container-property name="repository" reference="jcrRepository" required="true" />
			<property name="username" value="admin" />
			<property name="password" value="admin" />
			<property name="eventTypes" value="31" />
			<property name="deep" value="true" />
			<property name="noLocal" value="false" />
		</properties>
		<connection-strategy className="org.mule.providers.SimpleRetryConnectionStrategy">
			<properties>
				<property name="retryCount" value="-1" />
				<property name="frequency" value="2000" />
			</properties>
		</connection-strategy>
	</connector>

	<connector name="tcpConnector" className="org.mule.providers.tcp.TcpConnector">
		<properties>
			<container-property name="tcpProtocol" reference="org.mule.providers.tcp.protocols.EOFProtocol" />
		</properties>
	</connector>

	<transformers>
		<transformer name="ObjectToXml" className="org.mule.transformers.xml.ObjectToXml" />
		<transformer name="NoActionTransformer" className="org.mule.transformers.NoActionTransformer" />
	</transformers>

	<global-endpoints>
		<endpoint name="jcrImages" address="jcr://example/images">
			<filter className="org.mule.routing.filters.logic.AndFilter">
				<left-filter className="org.mule.providers.jcr.filters.JcrNodeNameFilter" pattern="jcr:content" />
				<right-filter className="org.mule.providers.jcr.filters.JcrPropertyNameFilter" pattern="jcr:data" />
			</filter>
		</endpoint>
		
		<endpoint name="jcrImageStreams" address="jcr://example/images" streaming="true">
			<filter className="org.mule.routing.filters.logic.AndFilter">
				<left-filter className="org.mule.providers.jcr.filters.JcrNodeNameFilter" pattern="jcr:content" />
				<right-filter className="org.mule.providers.jcr.filters.JcrPropertyNameFilter" pattern="jcr:data" />
			</filter>
		</endpoint>
	</global-endpoints>

	<model name="jcrNonStreamingExample" type="seda">
		<!--
			Simple bridge used to send content to different JCR outbound endpoints, demonstrating different persistence strategies.
			
			Type text in the console followed by enter should store data in JCR and trigger the listener of "jcrEventDumper" above.
		-->
		<mule-descriptor name="systemInMulticaster" implementation="org.mule.components.simple.BridgeComponent">
			<inbound-router>
				<endpoint address="stream://System.in">
					<properties>
						<property name="promptMessage" value="Type content to store in JCR: " />
					</properties>
				</endpoint>
			</inbound-router>
			<outbound-router>
				<router className="org.mule.routing.outbound.MulticastingRouter">
					<endpoint address="vm://storeInProperty" />
					<endpoint address="vm://storeInSingleNode" />
					<endpoint address="vm://storeInNewChildNodeEachTime" />
				</router>
			</outbound-router>
		</mule-descriptor>

		<!--
			Example of an endpoint that receives data and saves it in an existing property of the JCR container.
		-->
		<mule-descriptor name="jcrStoreToProperty" implementation="org.mule.components.simple.BridgeComponent"
			inboundEndpoint="vm://storeInProperty" outboundEndpoint="jcr://example/targetProperty" />

		<!--
			Example of an endpoint that receives data and saves it as a node of type nt:resource that is auto-created the first time, then updated.
		-->
		<mule-descriptor name="jcrStoreToSingleNode" implementation="org.mule.components.simple.BridgeComponent"
			inboundEndpoint="vm://storeInSingleNode">
			<outbound-router>
				<router className="org.mule.routing.outbound.OutboundPassThroughRouter">
					<endpoint address="jcr://example">
						<properties>
							<property name="nodeRelPath" value="targetSingleNtResourceNode" />
							<property name="nodeTypeName" value="nt:resource" />
							<property name="jcr:mimeType" value="text/plain" />
						</properties>
					</endpoint>
				</router>
			</outbound-router>
		</mule-descriptor>

		<!--
			Example of an endpoint that receives data and saves it as a new child node of type nt:unstructured.
		-->
		<mule-descriptor name="jcrStoreToNewChildNode" implementation="org.mule.components.simple.BridgeComponent"
			inboundEndpoint="vm://storeInNewChildNodeEachTime">
			<outbound-router>
				<router className="org.mule.routing.outbound.OutboundPassThroughRouter">
					<endpoint address="jcr://example">
						<properties>
							<property name="alwaysCreate" value="true" />
							<property name="nodeRelPath" value="targetMultipleUnstructuredNode" />
							<property name="nodeTypeName" value="nt:unstructured" />
						</properties>
					</endpoint>
				</router>
			</outbound-router>
		</mule-descriptor>

		<!-- 
			Example of an inbound endpoint that listens to JCR events.
			
			The event objects are then transformed to XML and sent to the console.
		-->
		<mule-descriptor name="jcrEventDumper" implementation="org.mule.components.simple.EchoComponent">
			<inbound-router>
				<endpoint address="jcr://example">
					<properties>
						<property name="contentPayloadType" value="full" />
					</properties>
				</endpoint>
			</inbound-router>
			<outbound-router>
				<router className="org.mule.routing.outbound.OutboundPassThroughRouter">
					<endpoint address="stream://System.out" transformers="ObjectToXml" />
				</router>
			</outbound-router>
		</mule-descriptor>

		<!-- 
			Example of an HTTP endpoint that fetches data from a JCR container, turning Mule into an HTTP picture server.
			
			Browsing http://localhost:8080/images/mule.gif or http://localhost:8080/images?get=jackrabbit.gif
			should return a gif image.
		-->
		<mule-descriptor name="jcrHttpContentFetcher" implementation="org.mule.components.script.jsr223.ScriptComponent">
			<inbound-router>
				<endpoint address="http://localhost:8080/images" synchronous="true" />
			</inbound-router>
			<properties>
				<property name="scriptEngineName" value="groovy" />
				<text-property name="scriptText"><![CDATA[
					def imageName = message.getPayload().substring(8);
					message.clearProperties();
					message.setStringProperty("nodeRelPath", imageName);
					message.setStringProperty("Content-Type", "image/gif");
					eventContext.setStopFurtherProcessing(true);
					return managementContext.lookupEndpoint("jcrImages").receive(0).getPayload();
			]]>
				</text-property>
			</properties>
		</mule-descriptor>
	</model>

	<model name="jcrStreamingExample" type="streaming">
		<mule-descriptor name="jcrHttpContentFetcher" implementation="org.mule.examples.jcr.JcrImageStreamComponent">
			<inbound-router>
				<endpoint address="tcp://localhost:9999" synchronous="true" streaming="true" connector="tcpConnector" />
			</inbound-router>
		</mule-descriptor>
	</model>
</mule-configuration>
